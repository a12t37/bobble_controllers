#!/usr/bin/python
import os
import rospy, rospkg, rosparam
import logging
from bobble_controllers.msg import BobbleBotStatus
from gazebo_msgs.srv import *
import subprocess
PKG = 'bobble_controllers'

class BobbleStateHold(object):

    def __init__(self):
        """
        This simple node just keeps the Bobble-Bot standing in sim until
        active control begins.
        """
        self._ConfigPackageName = rospy.get_param('~configPackageName', 'bobble_controllers')
        self._ConfigFileName = rospy.get_param('~configFileName', 'config/bobble_sim_balance_control.yaml')
        self.logger = logging.getLogger('hold_state_log')
        self._ControlMode = None # Do not have a mode until the controller is actually running
        self.controller_config_root_dir = rospkg.RosPack().get_path(self._ConfigPackageName)
        self.controller_config_file = os.path.join(self.controller_config_root_dir, self._ConfigFileName)

        self.logger.warning('STARTING UP')
        self.logger.warning(self.controller_config_file)
        # Listen to bb_controller_status messages
        rospy.Subscriber('/bobble/bobble_balance_controller/bb_controller_status', BobbleBotStatus, self._controllerDataReceived)
        # Kluge to reset sim state until balance is active
        self.reset_state = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)
        # Create a timer to execute the control loop
        rospy.Timer(rospy.Duration(0.0025), self._mainLoop)
        # Allow time for initialization of all needed nodes
        # Allow ROS to go to all callbacks.
        rospy.spin()

    def _mainLoop(self, _event):
        # Reset sim state until we're in active control. We fall over other-wise
        if self._ControlMode == 0:
            self._resetSimState()
            self._reloadControllerGains()

    def _resetSimState(self):
        try:
            self.reset_state(gazebo_msgs.msg.ModelState(
                model_name = 'bobblebot',
                pose = geometry_msgs.msg.Pose(position = geometry_msgs.msg.Point(x=0.0, y=0.0, z=0.0),
                                              orientation = geometry_msgs.msg.Quaternion(x=0.0, y=0.0, z=0.0, w=0.0)),
                twist = geometry_msgs.msg.Twist(linear = geometry_msgs.msg.Point(x=0.0, y=0.0, z=0.0),
                                                angular = geometry_msgs.msg.Quaternion(x=0.0, y=0.0, z=0.0, w=0.0)),
                reference_frame = 'world'))
        except Exception as e:
            self.logger.warning('Gazebo state was not able to be reset to zero.')
        return

    def _reloadControllerGains(self):
        try:
            self.logger.info('Reloading controller configuration file from ' + self.controller_config_file)
            subprocess.call('rosparam load '+self.controller_config_file, shell=True)
        except Exception as e:
            self.logger.warning('Failed to reload controller gains.')
        return

    def _controllerDataReceived(self, controller_data):
        self._ControlMode = controller_data.ControlMode

# Main function.
if __name__ == '__main__':
    # Initialize the node and name it.
    rospy.init_node('BobbleStateHolder', log_level=rospy.INFO)
    # Go to class functions that do all the heavy lifting. Do error checking.
    try:
        bb_state_hold_sim = BobbleStateHold()
    except rospy.ROSInterruptException:
        pass
